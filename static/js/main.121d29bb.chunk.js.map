{"version":3,"sources":["components/LoginForm/LoginForm.js","pages/Login/Login.js","App.js","serviceWorker.js","reducers/UserReducer.js","reducers/index.js","index.js"],"names":["LoginForm","props","useState","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","type","placeholder","value","onChange","e","target","event","onClick","payload","Login","user","useSelector","state","useEffect","id","connect","setTime","console","log","getCurrentTime","currTime","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","setInterval","to","exact","path","Boolean","window","location","hostname","match","inititalState","company","userActionTypes","rootReducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.121d29bb.chunk.js","sourcesContent":["import './LoginForm.css';\nimport React, { useState, useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\n\nfunction LoginForm(props) {\n\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [emailError, setEmailError] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const changeName = () => {\n        dispatch({\n            type: 'SET_NAME',\n            payload: name\n        });\n    };\n\n    const handleEmailInput = (event) => {\n        setEmail(event.target.value);\n    }\n\n    return (\n        <>\n            <div>\n                <input \n                    type=\"text\" \n                    placeholder=\"Nome\" \n                    value={name}\n                    onChange={(e) => { setName(e.target.value) }}\n                    />\n            </div>\n            <div>\n                <input \n                    type=\"text\" \n                    placeholder=\"E-mail\" \n                    value={email}\n                    onChange={handleEmailInput}\n                    />\n            </div>\n            <div>\n                <input \n                    type=\"password\" \n                    placeholder=\"Senha\" \n                    value={password}\n                    onChange={(e) => { setPassword(e.target.value) }}\n                    />\n                {/* {emailError && (<p>Insira um e-mail válido</p>)} */}\n            </div>\n            <button onClick={changeName}>\n                Enviar\n            </button>\n        </>\n    )\n\n}\n\nexport default LoginForm;","import React, { useState, useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport LoginForm from '../../components/LoginForm/LoginForm';\n\nfunction Login(props) {\n\n  const apiUrl = 'https://randomuser.me/api/';\n\n  const [users, setUsers] = useState([]);\n\n  const user = useSelector((state) => {\n    return state.user;\n  });\n\n  useEffect(() => {\n\n    // const storedUsers = fromCookie();\n    // if (storedUsers && storedUsers.users && storedUsers.users.length > 0) {\n    //   setUsers(storedUsers.users);\n    // } else {\n    //   getUsers();\n    //   toCookie();\n    // }\n  }, []);\n\n  const getUsers = async () => {\n    try {\n      const rawResponse = await fetch(apiUrl + '?results=20');\n      const jsonResponse = await rawResponse.json();\n      setUsers(jsonResponse.results);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const toCookie = () => {\n    localStorage.setItem('599_users', JSON.stringify({ users }));\n  }\n\n  const fromCookie = () => {\n    const stringObject = localStorage.getItem('599_users');\n    return JSON.parse(stringObject);\n  }\n\n  return (\n    <div id=\"login\">\n      <h2>Login</h2>\n      <p>Nome: {user.name}</p>\n      <LoginForm />\n    </div>\n  );\n}\n\nexport default Login;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Login from './pages/Login/Login';\nimport { BrowserRouter, Link, Redirect, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n\nfunction App(props) { \n\n  const [counter, setCounter] = useState(0);\n  const [time, setTime] = useState('');\n  const [entryTime, setEntryTime] = useState('');\n  const [outTime, setOutTime] = useState('');\n  // const [user, setUser] = useState({\n  //   name: 'Pietro Ribeiro',\n  //   email: '',\n  //   password: '',\n  //   company: 'Let\\'s Code'\n  // });\n\n  useEffect(() => {\n    console.log(props);\n  }, []);\n\n  const isLogged = false;\n\n  const getCurrentTime = () => {\n    const currTime = new Date();\n    const hours = currTime.getHours();\n    const minutes = currTime.getMinutes();\n    const seconds = currTime.getSeconds();\n    return `${hours}:${minutes}:${seconds}`;\n  }\n\n  const computeEntry = () => {\n    setEntryTime(getCurrentTime());\n  }\n\n  const computeOut = () => {\n    setOutTime(getCurrentTime());\n  }\n\n  // const changeName = (newName) => {\n  //   setUser({...user, name: newName});\n  // }\n\n  // const defineUser = (newUser) => {\n  //   setUser(newUser);\n  // }\n\n  setInterval(() => {\n    setTime(getCurrentTime());\n  }, 1000);\n\n  return (\n    <>\n      <BrowserRouter>\n        <header>\n          <h1>Registro de Ponto #599</h1>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/feriados\">Feriados</Link>\n            </li>\n          </ul>\n        </header>\n\n        <p>Nome: {props.user.name}</p>\n        {/* <p>E-mail: {user.email}</p>\n        <p>Senha: {user.password}</p> */}\n        \n        <Switch> \n          {/* Conteúdo que varia */}\n\n          <Route exact path=\"/\">\n            {isLogged ? \n              (<h2>Home</h2>) :\n              (<Redirect to=\"/login\" />)\n            }\n          </Route>\n\n          <Route exact path=\"/login\">\n            {isLogged ? \n              (<Redirect to=\"/\" />) :\n              (<>\n                <Login />\n              </>)\n            }\n          </Route>\n\n          <Route exact path=\"/feriados\">\n            {isLogged ? \n              (<h2>Feriados</h2>) :\n              (<Redirect to=\"/login\" />)\n            }\n          </Route>\n\n        </Switch>\n\n        <footer>\n          <p>&copy; Todos os direitos reservados. 2020.</p>\n        </footer>\n      </BrowserRouter>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  }\n};\n\nexport default connect(mapStateToProps)(App);\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const inititalState = {\n  name: 'Pietro Ribeiro',\n  email: '',\n  password: '',\n  company: 'Let\\'s Code'\n};\n\nconst userActionTypes = {\n  SET_NAME: 'SET_NAME'\n};\n\nconst UserReducer = (state = inititalState, action) => {\n\n  switch (action.type) {\n    case userActionTypes.SET_NAME:\n      return {...state, name: action.payload};\n    break;\n    default:\n      return {...state};\n    break;\n  }\n\n};\n\nexport {userActionTypes, UserReducer as default };","import { combineReducers } from 'redux';\nimport UserReducer, {userActionTypes} from './UserReducer';\n\nconst rootReducers = combineReducers({\n    user: UserReducer\n});\n\nexport default rootReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducers from './reducers';\n\nconst store = createStore(rootReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}